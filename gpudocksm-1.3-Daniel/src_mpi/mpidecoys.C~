#include <math.h>
#include <algorithm>
#include <stdio.h>
#include <mpi.h>
#include "mpidecoys.h"
#include "../lib/debug.h"
#include "assert.h"

#define     MPI		1
#define     TUNE	1
#define     ORIGINAL	0

const int SIZE = 70000;

//float static mcc_matrix[SIZE][SIZE];

using namespace std;

void Decoy(Complex * d_complex, std::string iname, std::string oname)
{
	ifstream infile;
	fstream outfile;

	vector < string > data;	// contains the input file content
	vector < float >mcc;

	string inputline;
	int number_of_lines = 0;
	infile.open(iname.c_str());
	if (infile.is_open()) {
		while (!infile.eof()) {
			getline(infile, inputline);
			data.push_back(inputline);
			number_of_lines++;
		}
	}
	// DEBUG_2_("number_of_lines: ", number_of_lines);
	outfile.open(oname.c_str());
	// int line=0;
	int atoms, newpens, newlens;
	infile.clear();
	infile.seekg(0, ios::beg);
	atoms = d_complex->getLigandAtomsTotal();

	int total_confs = ((number_of_lines - 1) / (atoms + 3));

	// -----------------------------
	// to tune the program, reduced total_confs
	// -----------------------------
	total_confs = 11;

	int mccMatrix_size = 0;
	for (int i = total_confs; i > 0; i--)
		mccMatrix_size += i;
	float *mccMatrix = new float[mccMatrix_size];

	// allocate the 1D mcc matrx in sequential mem
	int matrix_size = total_confs;
	int row_size = matrix_size;
	int col_size = matrix_size;
	float *mcc_matrix = new float[matrix_size * matrix_size];
	assert(mcc_matrix != NULL);

	double newcoords[MAXLIG][3];
	int conf = 0;
	int n1;			// index for fetching new native parameters

#if MPI
	int rank;
	int size;
	MPI_Init(NULL, NULL);

	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
#endif

	// if odd number, last row computed individually
	if (total_confs % 2 == 1) {
		// compute the last conf by rank 0
		if (rank == 0) {
			mcc_matrix[matrix_size * matrix_size - 1] = 1;
		}
		row_size--;
	}
	//==========================================================================
	// dispatch the work and compute
	int half_rows = row_size / 2;
	int half_rows_per_process = (int)ceil((float)half_rows / size);
	int begin_row = min(half_rows_per_process * rank, half_rows - 1);
	int end_row = min(begin_row + half_rows_per_process - 1, half_rows - 1);

#if 0
	DEBUG_2_("half_rows_per_process: ", half_rows_per_process);
	DEBUG_3_("rank: ", rank);
	DEBUG_3_("begin_row: ", begin_row);
	DEBUG_3_("end_row: ", end_row);
	DEBUG_3_("tail_begin: ", row_size - 1 - end_row);
	DEBUG_3_("tail_end: ", row_size - 1 - begin_row);
#endif

	//==========================================================================
	//compute the heads of the upper triangular matrix
	for (conf = begin_row; conf <= end_row; ++conf) {

		n1 = ((atoms + 3) * conf);

		newpens = atoi((data[n1]).c_str());
		newlens = atoi((data[n1 + 1]).c_str());

#if TUNE
		d_complex->setProteinEnsembleCurrent(newpens);
		d_complex->setLigandEnsembleCurrent(newlens);
#endif

		for (int j = n1 + 2, k = 0; k < atoms; j++, k++) {
			stringstream vec1_entry((data[j]).c_str());
			vec1_entry >> newcoords[k][0] >> newcoords[k][1] >> newcoords[k][2];
		}

#if TUNE
		d_complex->setConfCoords(newcoords);	// set lig conf coords
		d_complex->clearContactMatrix();
		d_complex->createContactMatrix();
#endif

		int pens_p;
		int lens_p;
		Complex complex_p = *d_complex;
		double coords_p[MAXLIG][3];

		int conf2_p;
		int n;		//used for vector entries

		for (conf2_p = conf; conf2_p < col_size; conf2_p++) {

#if 0
			DEBUG_3_("rank:", rank);
			DEBUG_3_("cycle: ", cycle);
			DEBUG_3_("conf2_p: ", conf2_p);
#endif

			//Calculate mcc for each conformation relative the the current "native"

			n = ((atoms + 3) * conf2_p);

			pens_p = atoi((data[n]).c_str());
			lens_p = atoi((data[n + 1]).c_str());

#if TUNE
			complex_p.setProteinEnsembleCurrent(pens_p);
			complex_p.setLigandEnsembleCurrent(lens_p);
#endif

			for (int j = n + 2, k = 0; k < atoms; j++, k++) {
				stringstream vec_entry((data[j]).c_str());
				vec_entry >> coords_p[k][0] >> coords_p[k][1] >> coords_p[k][2];
			}

#if TUNE
			complex_p.setConfCoords(coords_p);
			complex_p.calculateEnergy();
#endif

			int mcc_index = 0;

			if (conf == 0) {
				mcc_index = conf2_p;	// does rank start at 0 or 1?
			} else {
				for (int i = 1; i <= conf; i++) {
					mcc_index += total_confs - (i - 1);
				}
				mcc_index += conf2_p - conf;
			}

			// cout <<  rank << conf << conf2_p << " mcc_index: " << mcc_index <<" cmcc " << complex_p.getEnergy(1) << endl;

#if 0
			cout << mcc_index << "	" << complex_p.getEnergy(1) << endl;
			DEBUG_4_("conf: ", conf);
			DEBUG_4_("mcc_index: ", mcc_index);
			DEBUG_4_("cmcc: ", complex_p.getEnergy(1));
			DEBUG_4_("rank: ", rank);
			DEBUG_4_("conf2_p: ", conf2_p);
#endif

			mccMatrix[mcc_index] = complex_p.getEnergy(1);
			mcc_matrix[col_size * conf + conf2_p] = complex_p.getEnergy(1);
		}

		// compute_a_row (row, mcc);
		// compute_a_row (total_confs - row - 1, mcc);
	}

	//==========================================================================
	// compute the tails of the upper triangular matrix
	for (conf = row_size - 1 - end_row; conf <= row_size - 1 - begin_row; ++conf) {

		// cout << conf << endl;
		// DEBUG_4_("rank: ", rank);
		// DEBUG_4_("tails", conf);
		n1 = ((atoms + 3) * conf);

		newpens = atoi((data[n1]).c_str());
		newlens = atoi((data[n1 + 1]).c_str());

#if TUNE
		d_complex->setProteinEnsembleCurrent(newpens);
		d_complex->setLigandEnsembleCurrent(newlens);
#endif

		for (int j = n1 + 2, k = 0; k < atoms; j++, k++) {
			stringstream vec1_entry((data[j]).c_str());
			vec1_entry >> newcoords[k][0] >> newcoords[k][1] >> newcoords[k][2];
		}

#if TUNE
		d_complex->setConfCoords(newcoords);	// set lig conf coords
		d_complex->clearContactMatrix();
		d_complex->createContactMatrix();
#endif

		int pens_p;
		int lens_p;
		Complex complex_p = *d_complex;
		double coords_p[MAXLIG][3];

		int conf2_p;
		int n;		//used for vector entries

		for (conf2_p = conf; conf2_p < col_size; conf2_p++) {

#if 0
			DEBUG_3_("rank:", rank);
			DEBUG_3_("cycle: ", cycle);
			DEBUG_3_("conf2_p: ", conf2_p);
#endif
			//Calculate mcc for each conformation relative the the current "native"

			n = ((atoms + 3) * conf2_p);

			pens_p = atoi((data[n]).c_str());
			lens_p = atoi((data[n + 1]).c_str());

#if TUNE
			complex_p.setProteinEnsembleCurrent(pens_p);
			complex_p.setLigandEnsembleCurrent(lens_p);
#endif

			for (int j = n + 2, k = 0; k < atoms; j++, k++) {
				stringstream vec_entry((data[j]).c_str());
				vec_entry >> coords_p[k][0] >> coords_p[k][1] >> coords_p[k][2];
			}

#if TUNE
			complex_p.setConfCoords(coords_p);
			complex_p.calculateEnergy();
#endif

			int mcc_index = 0;

			if (conf == 0) {
				mcc_index = conf2_p;	// does rank start at 0 or 1?
			} else {
				for (int i = 1; i <= conf; i++) {
					mcc_index += total_confs - (i - 1);
				}
				mcc_index += conf2_p - conf;
			}

			// cout <<  rank << conf << conf2_p << " mcc_index: " << mcc_index <<" cmcc " << complex_p.getEnergy(1) << endl;

#if 0
			cout << mcc_index << "	" << complex_p.getEnergy(1) << endl;
			DEBUG_4_("conf: ", conf);
			DEBUG_4_("mcc_index: ", mcc_index);
			DEBUG_4_("cmcc: ", complex_p.getEnergy(1));
			DEBUG_4_("rank: ", rank);
			DEBUG_4_("conf2_p: ", conf2_p);
#endif

			mccMatrix[mcc_index] = complex_p.getEnergy(1);
			mcc_matrix[col_size * conf + conf2_p] = complex_p.getEnergy(1);

		}

		// compute_a_row (row, mcc);
		// compute_a_row (total_confs - row - 1, mcc);
	}

	//==========================================================================
	// reduce
	MPI_Status send_status[size], recv_status[size];
	MPI_Request send_req[size], recv_req[size];
	const int tag_head = 1, tag_tail = 2;
	// sender
	if (rank != 0) {
		int msg_size = matrix_size * (end_row - begin_row + 1);
		// send a block of sequential mem
		MPI_Isend(&mcc_matrix[matrix_size * begin_row], msg_size, MPI_FLOAT,	// heads
			  0, tag_head, MPI_COMM_WORLD, &send_req[rank]);
		MPI_Isend(&mcc_matrix[matrix_size * (row_size - 1 - end_row)], msg_size, MPI_FLOAT,	// tails
			  0, tag_tail, MPI_COMM_WORLD, &send_req[rank]);
		//DEBUG_2_("sending...", rank);
		MPI_Wait(&send_req[rank], &send_status[rank]);
		//DEBUG_2_("sent...", rank);
	}
	// receiver
	else {
		for (int sender = 1; sender < size; ++sender) {
			int begin_row_sender = min(half_rows_per_process * sender, half_rows - 1);
			int end_row_sender = min(begin_row_sender + half_rows_per_process - 1, half_rows - 1);
			int msg_size = matrix_size * (end_row_sender - begin_row_sender + 1);
			MPI_Irecv(&mcc_matrix[matrix_size * begin_row_sender], msg_size, MPI_FLOAT,	// heads
				  sender, tag_head, MPI_COMM_WORLD, &recv_req[sender]);
			MPI_Irecv(&mcc_matrix[matrix_size * (row_size - 1 - end_row_sender)], msg_size, MPI_FLOAT,	// tails
				  sender, tag_tail, MPI_COMM_WORLD, &recv_req[sender]);
		}
		MPI_Waitall(size - 1, &recv_req[1], &recv_status[1]);
	}

#if ORIGINAL
	//==========================================================================
	// native serial code
	while (conf < total_confs) {

		n1 = ((atoms + 3) * conf);

		newpens = atoi((data[n1]).c_str());
		newlens = atoi((data[n1 + 1]).c_str());

		d_complex->setProteinEnsembleCurrent(newpens);
		d_complex->setLigandEnsembleCurrent(newlens);

		for (int j = n1 + 2, k = 0; k < atoms; j++, k++) {
			stringstream vec1_entry((data[j]).c_str());
			vec1_entry >> newcoords[k][0] >> newcoords[k][1] >> newcoords[k][2];
		}

		d_complex->setConfCoords(newcoords);	// set lig conf coords
		d_complex->clearContactMatrix();
		d_complex->createContactMatrix();

		int pens_p;
		int lens_p;
		Complex complex_p = *d_complex;
		double coords_p[MAXLIG][3];

		int conf2_p;
		int n;		//used for vector entries

		for (conf2_p = conf; conf2_p < total_confs; conf2_p++) {

#if 0
			DEBUG_3_("rank:", rank);
			DEBUG_3_("cycle: ", cycle);
			DEBUG_3_("conf2_p: ", conf2_p);
#endif

			if (conf2_p < total_confs) {

				//Calculate mcc for each conformation relative the the current "native"

				n = ((atoms + 3) * conf2_p);

				pens_p = atoi((data[n]).c_str());
				lens_p = atoi((data[n + 1]).c_str());

				complex_p.setProteinEnsembleCurrent(pens_p);
				complex_p.setLigandEnsembleCurrent(lens_p);

				for (int j = n + 2, k = 0; k < atoms; j++, k++) {
					stringstream vec_entry((data[j]).c_str());
					vec_entry >> coords_p[k][0] >> coords_p[k][1] >> coords_p[k][2];
				}

				complex_p.setConfCoords(coords_p);
				complex_p.calculateEnergy();
				//mcc.push_back(complex_p.getEnergy(1));

				int mcc_index = 0;

				if (conf == 0) {
					mcc_index = conf2_p;	// does rank start at 0 or 1?
				} else {
					for (int i = 1; i <= conf; i++) {
						mcc_index += total_confs - (i - 1);
					}
					mcc_index += conf2_p - conf;
				}

				// cout <<  rank << conf << conf2_p << " mcc_index: " << mcc_index <<" cmcc " << complex_p.getEnergy(1) << endl;

#if 0
				DEBUG_4_("conf: ", conf);
				DEBUG_4_("mcc_index: ", mcc_index);
				DEBUG_4_("cmcc: ", complex_p.getEnergy(1));
				DEBUG_4_("rank: ", rank);
				DEBUG_4_("conf2_p: ", conf2_p);
#endif

				mccMatrix[mcc_index] = complex_p.getEnergy(1);
			}
		}

		conf++;
		// DEBUG_4_("conf", conf);
	}
#endif

#if 1
	if (rank == 0) {
		/* copy from upper triangular part to lower */

		for (int i = 0; i < matrix_size; i++)
			for (int j = 0; j < matrix_size; j++)
				mcc_matrix[matrix_size * j + i] = mcc_matrix[matrix_size * i + j];
	for (int i = 0; i < matrix_size; i++) {
		for (int j = 0; j < matrix_size; j++) {
			outfile << setw(10);
			outfile << mcc_matrix[matrix_size * i + j];
		}
		outfile << endl;
	}

	}
#endif

#if MPI
	MPI_Finalize();
#endif


#if ORIGINAL
	//==========================================================================
	// Print the entire matrix from 1D Array

	int l1, l2, l3, l5;
	for (l1 = 0, l2 = 1, l3 = 1; l1 < mccMatrix_size; l1++, l2++) {
		if (l2 == l3) {
			l5 = 0;
			for (int l4 = 0; l4 < (l3 - 1); l4++) {
				if (l4 >= 2)
					l5 += l4 - 1;
				outfile << mccMatrix[(((l4) * total_confs) - (l5)) + (l2 - l4) - 1] << " ";
			}
		}

		outfile << mccMatrix[l1] << " ";
		if (l2 == total_confs) {
			outfile << endl;
			l3++;
			l2 = l3 - 1;
		}
	}
#endif

	infile.close();
	outfile.close();

	delete[]mccMatrix;
	delete[]mcc_matrix;
}

std::ifstream & GotoLine(std::ifstream & file, int num)
{
	file.seekg(std::ios::beg);
	for (int i = 0; i < num - 1; ++i) {
		file.ignore(std::numeric_limits < std::streamsize >::max(), '\n');
	}
	return file;
}
