!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
1	src/rmsd.f	/^    1 r(i,j) = zero$/;"	l	subroutine:u3b	file:
10	src/rmsd.f	/^   10 do 15 l = 1, 3, 2$/;"	l	subroutine:u3b	file:
11	src/rmsd.f	/^   11 j = 3$/;"	l	subroutine:u3b	file:
12	src/rmsd.f	/^   12 if (dabs(ss1) .lt. dabs(ss6)) goto 11$/;"	l	subroutine:u3b	file:
13	src/rmsd.f	/^   13 d = zero$/;"	l	subroutine:u3b	file:
14	src/rmsd.f	/^   14 d = d + (ss(k) * ss(k))$/;"	l	subroutine:u3b	file:
15	src/rmsd.f	/^   15 a(i,l) = a(i,l) * d$/;"	l	subroutine:u3b	file:
16	src/rmsd.f	/^   16 p = zero$/;"	l	subroutine:u3b	file:
17	src/rmsd.f	/^   17 p = p + (a(i,m1) ** 2)$/;"	l	subroutine:u3b	file:
18	src/rmsd.f	/^   18 a(i,m1) = a(i,m1) * p$/;"	l	subroutine:u3b	file:
19	src/rmsd.f	/^   19 p = one$/;"	l	subroutine:u3b	file:
2	src/rmsd.f	/^    2 yc(i) = yc(i) + (w(m) * y(i,m))$/;"	l	subroutine:u3b	file:
20	src/rmsd.f	/^   20 continue$/;"	l	subroutine:u3b	file:
21	src/rmsd.f	/^   21 a(1,2) = (a(2,3) * a(3,1)) - (a(2,1) * a(3,3))$/;"	l	subroutine:u3b	file:
3	src/rmsd.f	/^    3 yc(i) = yc(i) \/ wc$/;"	l	subroutine:u3b	file:
30	src/rmsd.f	/^   30 do 32 l = 1, 2$/;"	l	subroutine:u3b	file:
31	src/rmsd.f	/^   31 d = d + (b(i,l) ** 2)$/;"	l	subroutine:u3b	file:
32	src/rmsd.f	/^   32 b(i,l) = b(i,l) * d$/;"	l	subroutine:u3b	file:
33	src/rmsd.f	/^   33 p = p + (b(i,2) ** 2)$/;"	l	subroutine:u3b	file:
34	src/rmsd.f	/^   34 b(i,2) = b(i,2) * p$/;"	l	subroutine:u3b	file:
35	src/rmsd.f	/^   35 p = one$/;"	l	subroutine:u3b	file:
36	src/rmsd.f	/^   36 continue$/;"	l	subroutine:u3b	file:
37	src/rmsd.f	/^   37 b(1,3) = (b(2,1) * b(3,2)) - (b(2,2) * b(3,1))$/;"	l	subroutine:u3b	file:
39	src/rmsd.f	/^   39 u(i,j) = ((b(i,1) * a(j,1)) + (b(i,2) * a(j,2))) + (b(i,3) * a(j,3$/;"	l	subroutine:u3b	file:
4	src/rmsd.f	/^    4 r(i,j) = r(i,j) + (d * (x(j,m) - xc(j)))$/;"	l	subroutine:u3b	file:
40	src/rmsd.f	/^   40 do 41 i = 1, 3$/;"	l	subroutine:u3b	file:
41	src/rmsd.f	/^   41 t(i) = ((yc(i) - (u(i,1) * xc(1))) - (u(i,2) * xc(2))) - (u(i,3)$/;"	l	subroutine:u3b	file:
5	src/rmsd.f	/^    5 rr(m) = ((r(1,i) * r(1,j)) + (r(2,i) * r(2,j))) + (r(3,i) * r(3,j)$/;"	l	subroutine:u3b	file:
50	src/rmsd.f	/^   50 do 51 i = 1, 3$/;"	l	subroutine:u3b	file:
51	src/rmsd.f	/^   51 e(i) = dsqrt(e(i))$/;"	l	subroutine:u3b	file:
52	src/rmsd.f	/^   52 d = (d + e2) + e1$/;"	l	subroutine:u3b	file:
6	src/rmsd.f	/^    6 e(i) = spur$/;"	l	subroutine:u3b	file:
8	src/rmsd.f	/^    8 if (mode) 30, 50, 30$/;"	l	subroutine:u3b	file:
CFLAGS	src/Makefile	/^CFLAGS = -O2 -Wall -I..\/lib -I.$/;"	m
CPP	src/Makefile	/^CPP = g++$/;"	m
Complex	src/complex.C	/^Complex::Complex( int ap, int al )$/;"	f	class:Complex
Complex	src/complex.C	/^Complex::Complex( void )$/;"	f	class:Complex
Complex	src/complex.h	/^class Complex {$/;"	c
CoordsKDE	src/coords.C	/^CoordsKDE::CoordsKDE( int an, int at, double ax, double ay, double az )$/;"	f	class:CoordsKDE
CoordsKDE	src/coords.C	/^CoordsKDE::CoordsKDE( void )$/;"	f	class:CoordsKDE
CoordsKDE	src/coords.h	/^class CoordsKDE {$/;"	c
CoordsLigand	src/coords.C	/^CoordsLigand::CoordsLigand( int an, string aa, int at, double ac )$/;"	f	class:CoordsLigand
CoordsLigand	src/coords.C	/^CoordsLigand::CoordsLigand( void )$/;"	f	class:CoordsLigand
CoordsLigand	src/coords.h	/^class CoordsLigand {$/;"	c
CoordsProtein	src/coords.C	/^CoordsProtein::CoordsProtein( int ar, int an, int at, int ad, int ac )$/;"	f	class:CoordsProtein
CoordsProtein	src/coords.C	/^CoordsProtein::CoordsProtein( void )$/;"	f	class:CoordsProtein
CoordsProtein	src/coords.h	/^class CoordsProtein {$/;"	c
EXE	src/Makefile	/^EXE = gpudocksm gpudocksm_lhm$/;"	m
FC	src/Makefile	/^FC = gfortran$/;"	m
FFLAGS	src/Makefile	/^FFLAGS = -O2 -Wall -static$/;"	m
LDFLAGS	src/Makefile	/^LDFLAGS = -lm -L..\/lib$/;"	m
MAXEN1	src/size.h	/^const int MAXEN1 = 3;     \/* protein confs *\/$/;"	v
MAXEN2	src/size.h	/^const int MAXEN2 = 20;    \/* ligand confs *\/$/;"	v
MAXFP1	src/size.h	/^const int MAXFP1 = 1024;  \/* smiles *\/$/;"	v
MAXFP2	src/size.h	/^const int MAXFP2 = 168;   \/* maccs *\/$/;"	v
MAXKDE	src/size.h	/^const int MAXKDE = 10000; \/* kde points *\/$/;"	v
MAXLIB	src/size.h	/^const int MAXLIB = 100;   \/* library cmps *\/$/;"	v
MAXLIG	src/size.h	/^const int MAXLIG = 100;   \/* ligand heavy atoms *\/$/;"	v
MAXMCS	src/size.h	/^const int MAXMCS = 500;   \/* mcs fields *\/$/;"	v
MAXPOS	src/size.h	/^const int MAXPOS = 1000;  \/* position restraints *\/$/;"	v
MAXPRO	src/size.h	/^const int MAXPRO = 3000;  \/* protein residues *\/$/;"	v
MAXREP	src/size.h	/^const int MAXREP = 1000;  \/* max replicas *\/$/;"	v
MAXSDF	src/size.h	/^const int MAXSDF = 1000;  \/* sdf length *\/$/;"	v
MAXSWP	src/size.h	/^const int MAXSWP = 2000;  \/* max swapping pairs *\/$/;"	v
MAXTP1	src/size.h	/^const int MAXTP1 = 30;    \/* point types *\/$/;"	v
MAXTP2	src/size.h	/^const int MAXTP2 = 24;    \/* atom types *\/$/;"	v
MAXTP3	src/size.h	/^const int MAXTP3 = 50;    \/* point types (for ele) *\/$/;"	v
MAXTP4	src/size.h	/^const int MAXTP4 = 20;    \/* residue types *\/$/;"	v
MAXWEI	src/size.h	/^const int MAXWEI = 9;     \/* energy terms *\/$/;"	v
MonteCarlo	src/montecarlo.C	/^void MonteCarlo( Complex * mc_complex, int mc_steps, double mc_t, double mc_r, double mc_b, bool mc_prt, double mc_temp, double mc_conf1[], int mc_conf2[], double &mc_energy, int mc_number, int &mc_tot, int &mc_acc )$/;"	f
OBJ	src/Makefile	/^OBJ = gpudocksm.o coords.o data.o complex.o walltime.o rmsd.o remc.o montecarlo.o random.o$/;"	m
PI	src/size.h	/^const double PI = 3.14159265;$/;"	v
REMC	src/remc.C	/^void REMC( Complex * re_complex, int re_replicas, int re_steps, int re_cycles, double re_t, double re_r, double re_b, bool re_prt )$/;"	f
Replica	src/remc.h	/^struct Replica$/;"	s
SH	src/Makefile	/^SH = sh$/;"	m
__COMPLEX_H_	src/complex.h	17;"	d
__COORDS_H_	src/coords.h	17;"	d
__DATA_H_	src/data.h	17;"	d
__GPUDOCKSM_H_	src/gpudocksm.h	17;"	d
__MONTECARLO_H_	src/montecarlo.h	17;"	d
__RANDOM_H_	src/random.h	17;"	d
__REMC_H_	src/remc.h	17;"	d
__RMSD_H_	src/rmsd.h	17;"	d
__SIZE_H_	src/size.h	17;"	d
__WALLTIME_H_	src/walltime.h	17;"	d
_a	src/coords.h	/^    string _a;         \/\/ atom name$/;"	m	class:CoordsLigand
_c	src/coords.h	/^    double _c;         \/\/ atom charge$/;"	m	class:CoordsLigand
_c	src/coords.h	/^    int    _c;         \/\/ effective point class$/;"	m	class:CoordsProtein
_complex_ele	src/complex.h	/^    double _complex_ele[MAXTP3];            \/\/ electrostatic potential$/;"	m	class:Complex
_complex_hdb	src/complex.h	/^    double _complex_hdb[MAXTP1][MAXTP2][2]; \/\/ ligand hydrophobicity$/;"	m	class:Complex
_complex_hpl	src/complex.h	/^    double _complex_hpl[MAXTP2][2];         \/\/ ligand hydrophobicity$/;"	m	class:Complex
_complex_hpp	src/complex.h	/^    double _complex_hpp[MAXTP4];            \/\/ protein hydrophobicity$/;"	m	class:Complex
_complex_pmf	src/complex.h	/^    double _complex_pmf[MAXTP1][MAXTP2][2]; \/\/ contact potential$/;"	m	class:Complex
_complex_psp	src/complex.h	/^    map<pair<int,int>, double> _complex_psp;          \/\/ pocket-specific potential$/;"	m	class:Complex
_complex_vdw	src/complex.h	/^    double _complex_vdw[MAXTP1][MAXTP2][2]; \/\/ L-J potential$/;"	m	class:Complex
_d	src/coords.h	/^    int    _d;         \/\/ residue code$/;"	m	class:CoordsProtein
_ebst	src/complex.h	/^    double _ebst;                           \/\/ best energy$/;"	m	class:Complex
_edst	src/complex.h	/^    double _edst;                           \/\/ distance restraints$/;"	m	class:Complex
_eele	src/complex.h	/^    double _eele;                           \/\/ soft electrostatic potential$/;"	m	class:Complex
_ehdb	src/complex.h	/^    double _ehdb;                           \/\/ hydrogen bond potential$/;"	m	class:Complex
_ehpc	src/complex.h	/^    double _ehpc;                           \/\/ hydrophobic potential$/;"	m	class:Complex
_ekde	src/complex.h	/^    double _ekde;                           \/\/ kde potential$/;"	m	class:Complex
_elhm	src/complex.h	/^    double _elhm;                           \/\/ position restraints$/;"	m	class:Complex
_epmf	src/complex.h	/^    double _epmf;                           \/\/ contact potential$/;"	m	class:Complex
_epsp	src/complex.h	/^    double _epsp;                           \/\/ pocket-specific potential$/;"	m	class:Complex
_etot	src/complex.h	/^    double _etot;                           \/\/ total energy$/;"	m	class:Complex
_evdw	src/complex.h	/^    double _evdw;                           \/\/ soft L-J potential$/;"	m	class:Complex
_kde_xyz	src/complex.h	/^    vector<CoordsKDE>          _kde_xyz;              \/\/ kde coords$/;"	m	class:Complex
_lens_best	src/complex.h	/^    int                  _lens_best;          \/\/ best conformation$/;"	m	class:Complex
_lens_current	src/complex.h	/^    int                  _lens_current;       \/\/ current conformation$/;"	m	class:Complex
_lens_rmsd	src/complex.h	/^    double               _lens_rmsd[MAXEN2];  \/\/ ensemble rmsd$/;"	m	class:Complex
_lens_total	src/complex.h	/^    int                  _lens_total;         \/\/ total ensemble conformations$/;"	m	class:Complex
_ligand_center	src/complex.h	/^    double               _ligand_center[3];   \/\/ ligand geometric center$/;"	m	class:Complex
_ligand_fpt_maccs	src/complex.h	/^    bitset<MAXFP2>       _ligand_fpt_maccs;   \/\/ fingerprint maccs$/;"	m	class:Complex
_ligand_fpt_smiles	src/complex.h	/^    bitset<MAXFP1>       _ligand_fpt_smiles;  \/\/ fingerprint smiles$/;"	m	class:Complex
_ligand_id	src/complex.h	/^    std::string          _ligand_id;          \/\/ ligand id$/;"	m	class:Complex
_ligand_mcs	src/complex.h	/^    list<mcs_restraints> _ligand_mcs;         \/\/ lhm position restraints$/;"	m	class:Complex
_ligand_prop_hba	src/complex.h	/^    int                  _ligand_prop_hba;    \/\/ ligand hydrogen bond acceptors$/;"	m	class:Complex
_ligand_prop_hbd	src/complex.h	/^    int                  _ligand_prop_hbd;    \/\/ ligand hydrogen bond donors$/;"	m	class:Complex
_ligand_prop_logp	src/complex.h	/^    double               _ligand_prop_logp;   \/\/ ligand water\/octanol partition coeff$/;"	m	class:Complex
_ligand_prop_mr	src/complex.h	/^    double               _ligand_prop_mr;     \/\/ ligand molar refractivity$/;"	m	class:Complex
_ligand_prop_mw	src/complex.h	/^    double               _ligand_prop_mw;     \/\/ ligand molecular weight$/;"	m	class:Complex
_ligand_prop_psa	src/complex.h	/^    double               _ligand_prop_psa;    \/\/ ligand polar surface area$/;"	m	class:Complex
_ligand_rot	src/complex.h	/^    double               _ligand_rot[3];      \/\/ ligand rotation$/;"	m	class:Complex
_ligand_rot_best	src/complex.h	/^    double               _ligand_rot_best[3]; \/\/ best ligand rotation$/;"	m	class:Complex
_ligand_smiles	src/complex.h	/^    std::string          _ligand_smiles;      \/\/ ligand smiles$/;"	m	class:Complex
_ligand_tra	src/complex.h	/^    double               _ligand_tra[3];      \/\/ ligand translation$/;"	m	class:Complex
_ligand_tra_best	src/complex.h	/^    double               _ligand_tra_best[3]; \/\/ best ligand translation$/;"	m	class:Complex
_ligand_xyz	src/complex.h	/^    vector<CoordsLigand> _ligand_xyz;         \/\/ ligand heavy-atom coordinates$/;"	m	class:Complex
_lna	src/complex.h	/^    int                  _lna;                \/\/ number of ligand atoms$/;"	m	class:Complex
_lnb	src/complex.h	/^    int                  _lnb;                \/\/ number of ligand bonds$/;"	m	class:Complex
_n	src/coords.h	/^    int    _n;         \/\/ atom number$/;"	m	class:CoordsLigand
_n	src/coords.h	/^    int    _n;         \/\/ effective point number$/;"	m	class:CoordsProtein
_n	src/coords.h	/^    int    _n; \/\/ point number$/;"	m	class:CoordsKDE
_par_el	src/complex.h	/^    double _par_el[2];                      \/\/ electrostatic params$/;"	m	class:Complex
_par_kde	src/complex.h	/^    double _par_kde;                        \/\/ kde bandwidth$/;"	m	class:Complex
_par_lj	src/complex.h	/^    double _par_lj[3];                      \/\/ L-J params$/;"	m	class:Complex
_pens_best	src/complex.h	/^    int                        _pens_best;            \/\/ best conformation$/;"	m	class:Complex
_pens_current	src/complex.h	/^    int                        _pens_current;         \/\/ current conformation$/;"	m	class:Complex
_pens_total	src/complex.h	/^    int                        _pens_total;           \/\/ total ensemble conformations$/;"	m	class:Complex
_pnk	src/complex.h	/^    int                        _pnk;                  \/\/ total number of kde points$/;"	m	class:Complex
_pnp	src/complex.h	/^    int                        _pnp;                  \/\/ number of protein effective points$/;"	m	class:Complex
_pnr	src/complex.h	/^    int                        _pnr;                  \/\/ number of protein residues$/;"	m	class:Complex
_pns	src/complex.h	/^    int                        _pns[MAXTP2];          \/\/ number of specific kde points$/;"	m	class:Complex
_pocket_center	src/complex.h	/^    double                     _pocket_center[3];     \/\/ pocket center$/;"	m	class:Complex
_protein_seq1	src/complex.h	/^    std::string                _protein_seq1;         \/\/ aa sequence$/;"	m	class:Complex
_protein_seq2	src/complex.h	/^    char                       _protein_seq2[MAXPRO]; \/\/ aa sequence$/;"	m	class:Complex
_protein_seq3	src/complex.h	/^    int                        _protein_seq3[MAXPRO]; \/\/ aa sequence numbering$/;"	m	class:Complex
_protein_xyz	src/complex.h	/^    vector<CoordsProtein>      _protein_xyz;          \/\/ protein effective points coords$/;"	m	class:Complex
_r	src/coords.h	/^    int    _r;         \/\/ residue number$/;"	m	class:CoordsProtein
_stats_evals	src/complex.h	/^    int _stats_evals; \/\/ function evaluations$/;"	m	class:Complex
_t	src/coords.h	/^    int    _t;         \/\/ atom type$/;"	m	class:CoordsLigand
_t	src/coords.h	/^    int    _t;         \/\/ effective point type$/;"	m	class:CoordsProtein
_t	src/coords.h	/^    int    _t; \/\/ atom type$/;"	m	class:CoordsKDE
_temp	src/complex.h	/^    double _temp;                           \/\/ current temperature$/;"	m	class:Complex
_weights	src/complex.h	/^    double _weights[MAXWEI];                \/\/ weights for energy terms$/;"	m	class:Complex
_x	src/coords.h	/^    double _x; \/\/ x coords (ensemble)$/;"	m	class:CoordsKDE
_x	src/coords.h	/^    double _x[MAXEN1]; \/\/ x coords (ensemble)$/;"	m	class:CoordsProtein
_x	src/coords.h	/^    double _x[MAXEN2]; \/\/ x coords (ensemble)$/;"	m	class:CoordsLigand
_y	src/coords.h	/^    double _y; \/\/ y coords (ensemble)$/;"	m	class:CoordsKDE
_y	src/coords.h	/^    double _y[MAXEN1]; \/\/ y coords (ensemble)$/;"	m	class:CoordsProtein
_y	src/coords.h	/^    double _y[MAXEN2]; \/\/ y coords (ensemble)$/;"	m	class:CoordsLigand
_z	src/coords.h	/^    double _z; \/\/ z coords (ensemble)$/;"	m	class:CoordsKDE
_z	src/coords.h	/^    double _z[MAXEN1]; \/\/ z coords (ensemble)$/;"	m	class:CoordsProtein
_z	src/coords.h	/^    double _z[MAXEN2]; \/\/ z coords (ensemble)$/;"	m	class:CoordsLigand
calculateEnergy	src/complex.C	/^void Complex::calculateEnergy( void )$/;"	f	class:Complex
conf1	src/remc.h	/^ double conf1[6]; \/* translation + rotation *\/$/;"	m	struct:Replica
conf2	src/remc.h	/^ int    conf2[2]; \/* protein + ligand ensemble *\/$/;"	m	struct:Replica
energy	src/remc.h	/^ double   energy; \/* total energy *\/$/;"	m	struct:Replica
getAtomCharge	src/coords.C	/^double CoordsLigand::getAtomCharge( void )$/;"	f	class:CoordsLigand
getAtomName	src/coords.C	/^string CoordsLigand::getAtomName( void )$/;"	f	class:CoordsLigand
getAtomNumber	src/coords.C	/^int CoordsLigand::getAtomNumber( void )$/;"	f	class:CoordsLigand
getAtomType	src/coords.C	/^int CoordsLigand::getAtomType( void )$/;"	f	class:CoordsLigand
getCoords	src/coords.C	/^double CoordsKDE::getCoords( int an )$/;"	f	class:CoordsKDE
getCoords	src/coords.C	/^double CoordsLigand::getCoords( int an, int ai )$/;"	f	class:CoordsLigand
getCoords	src/coords.C	/^double CoordsProtein::getCoords( int an, int ai )$/;"	f	class:CoordsProtein
getEnergy	src/complex.C	/^double Complex::getEnergy( int ei )$/;"	f	class:Complex
getFunctionEvals	src/complex.C	/^int Complex::getFunctionEvals( void )$/;"	f	class:Complex
getLigCode	src/data.C	/^int getLigCode( std::string r_name )$/;"	f
getLigName	src/data.C	/^std::string getLigName( int r_code )$/;"	f
getLigandAtomsTotal	src/complex.C	/^int Complex::getLigandAtomsTotal( void )$/;"	f	class:Complex
getLigandBondsTotal	src/complex.C	/^int Complex::getLigandBondsTotal( void )$/;"	f	class:Complex
getLigandEnsembleCurrent	src/complex.C	/^int Complex::getLigandEnsembleCurrent( void )$/;"	f	class:Complex
getLigandEnsembleTotal	src/complex.C	/^int Complex::getLigandEnsembleTotal( void )$/;"	f	class:Complex
getLigandID	src/complex.C	/^std::string Complex::getLigandID( void )$/;"	f	class:Complex
getPntCode	src/data.C	/^int getPntCode( std::string r_name )$/;"	f
getPntName	src/data.C	/^std::string getPntName( int r_code )$/;"	f
getPointClass	src/coords.C	/^int CoordsProtein::getPointClass( void )$/;"	f	class:CoordsProtein
getPointNumber	src/coords.C	/^int CoordsKDE::getPointNumber( void )$/;"	f	class:CoordsKDE
getPointNumber	src/coords.C	/^int CoordsProtein::getPointNumber( void )$/;"	f	class:CoordsProtein
getPointType	src/coords.C	/^int CoordsKDE::getPointType( void )$/;"	f	class:CoordsKDE
getPointType	src/coords.C	/^int CoordsProtein::getPointType( void )$/;"	f	class:CoordsProtein
getProteinEnsembleCurrent	src/complex.C	/^int Complex::getProteinEnsembleCurrent( void )$/;"	f	class:Complex
getProteinEnsembleTotal	src/complex.C	/^int Complex::getProteinEnsembleTotal( void )$/;"	f	class:Complex
getProteinPointsTotal	src/complex.C	/^int Complex::getProteinPointsTotal( void )$/;"	f	class:Complex
getProteinResiduesTotal	src/complex.C	/^int Complex::getProteinResiduesTotal( void )$/;"	f	class:Complex
getProteinSequence	src/complex.C	/^std::string Complex::getProteinSequence( void )$/;"	f	class:Complex
getResCode	src/data.C	/^int getResCode( std::string r_name )$/;"	f
getResCodeOne	src/data.C	/^int getResCodeOne( std::string r_name )$/;"	f
getResName	src/data.C	/^std::string getResName( int r_code )$/;"	f
getResidueCode	src/coords.C	/^int CoordsProtein::getResidueCode( void )$/;"	f	class:CoordsProtein
getResidueNumber	src/coords.C	/^int CoordsProtein::getResidueNumber( void )$/;"	f	class:CoordsProtein
getTemperature	src/complex.C	/^double Complex::getTemperature( void )$/;"	f	class:Complex
loadLHM	src/complex.C	/^bool Complex::loadLHM( std::string h1_name )$/;"	f	class:Complex
loadLigand	src/complex.C	/^bool Complex::loadLigand( std::string llib1[], int llib2, std::string llib3 )$/;"	f	class:Complex
loadParams	src/complex.C	/^bool Complex::loadParams( std::string d1_name )$/;"	f	class:Complex
loadProtein	src/complex.C	/^bool Complex::loadProtein( std::string p1_name )$/;"	f	class:Complex
main	src/gpudocksm.C	/^int main(int argc, char *argv[])$/;"	f
mcs_restraints	src/complex.h	/^struct mcs_restraints$/;"	s
number	src/remc.h	/^ int      number; \/* replica number *\/$/;"	m	struct:Replica
one2three	src/data.C	/^std::string one2three( std::string resnam1 )$/;"	f
printTime	src/walltime.C	/^void printTime( double dif1 )$/;"	f
setAtomCharge	src/coords.C	/^void CoordsLigand::setAtomCharge( double ac )$/;"	f	class:CoordsLigand
setAtomType	src/coords.C	/^void CoordsLigand::setAtomType( int at )$/;"	f	class:CoordsLigand
setBest	src/complex.C	/^void Complex::setBest( void )$/;"	f	class:Complex
setConfiguration	src/complex.C	/^void Complex::setConfiguration( double conf1[] )$/;"	f	class:Complex
setCoords	src/coords.C	/^void CoordsKDE::setCoords( double ax, double ay, double az)$/;"	f	class:CoordsKDE
setCoords	src/coords.C	/^void CoordsLigand::setCoords( double ax, double ay, double az, int ai)$/;"	f	class:CoordsLigand
setCoords	src/coords.C	/^void CoordsProtein::setCoords( double ax, double ay, double az, int ai)$/;"	f	class:CoordsProtein
setLigandEnsembleCurrent	src/complex.C	/^void Complex::setLigandEnsembleCurrent( int ei )$/;"	f	class:Complex
setProteinEnsembleCurrent	src/complex.C	/^void Complex::setProteinEnsembleCurrent( int ei )$/;"	f	class:Complex
setTemperature	src/complex.C	/^void Complex::setTemperature( double temp1 )$/;"	f	class:Complex
steps_acc	src/remc.h	/^ int   steps_acc; \/* accepted MC steps *\/$/;"	m	struct:Replica
steps_tot	src/remc.h	/^ int   steps_tot; \/* total MC steps *\/$/;"	m	struct:Replica
tcc	src/complex.h	/^ double          tcc;$/;"	m	struct:mcs_restraints
temp	src/remc.h	/^ double     temp; \/* temperature *\/$/;"	m	struct:Replica
three2oneC	src/data.C	/^char three2oneC( std::string resnam1 )$/;"	f
three2oneS	src/data.C	/^std::string three2oneS( std::string resnam1 )$/;"	f
total	src/complex.h	/^ int             total;$/;"	m	struct:mcs_restraints
u3b	src/rmsd.f	/^      subroutine u3b(/;"	s
unirand	src/random.C	/^double unirand( double a, double b )$/;"	f
xcoord	src/complex.h	/^ map<int,double> xcoord;$/;"	m	struct:mcs_restraints
ycoord	src/complex.h	/^ map<int,double> ycoord;$/;"	m	struct:mcs_restraints
zcoord	src/complex.h	/^ map<int,double> zcoord;$/;"	m	struct:mcs_restraints
~Complex	src/complex.C	/^Complex::~Complex() {}$/;"	f	class:Complex
~CoordsKDE	src/coords.C	/^CoordsKDE::~CoordsKDE() {}$/;"	f	class:CoordsKDE
~CoordsLigand	src/coords.C	/^CoordsLigand::~CoordsLigand() {}$/;"	f	class:CoordsLigand
~CoordsProtein	src/coords.C	/^CoordsProtein::~CoordsProtein() {}$/;"	f	class:CoordsProtein
