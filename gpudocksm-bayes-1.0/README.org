* Preface
  GPU ligand docking project.
  - The implementation of ligand docking on GPU architecture
  - Replica-exchange Monte Carlo method ussed as the searching method


* Developers' log
  
** TODO clustering in the ligand purterbation space
   1. [ ] the number of clusters should not be assumed?
   2. [ ] the symmetry of the rotational perturbation should be considered
   3. 

** DONE develope bayesian force field

*** DONE verify the calculation of conditional probability
    1. original C code to calculate pdf
       ../test/distribution.C

*** DONE normalize energy value for bayesian force field
    - applying the linear transformation normalized_df = a*df + b
    | a:    |           |
    |-------+-----------|
    | _evdw |  0.653797 |
    | _eele |  3.789781 |
    | _epmf |  0.144446 |
    | _ehpc |  0.091069 |
    | _ehdb |  1.074801 |
    | _edst |  0.187670 |
    | _epsp |  0.216229 |
    | _ekde | 22.495897 |
    | _elhm |  0.472555 |
    |-------+-----------|
    | b:    |           |
    |-------+-----------|
    | _evdw |  1.032007 |
    | _eele | -0.364693 |
    | _epmf |  0.153934 |
    | _ehpc | -1.005087 |
    | _ehdb |  1.000000 |
    | _edst | -1.000000 |
    | _epsp | -0.202412 |
    | _ekde | -1.000000 |
    | _elhm | -0.426394 |

** DONE Data structure from array of structure (AoS) to structure of array (SoA)

** DONE Energy calculation and Metropolis Monte Carlo
*** DONE perturbation of ligand
**** DONE c++ code
    - [X] in loading, the coord of original ligand should be guaranteed to be in its center reference
    - [X] after loading, the coord of original ligand should be guaranteed to be in its center reference
      stored in
      #+BEGIN_SRC 
      LigCoord *coord_orig = &mylig->coord_orig;
      #+END_SRC
    - [X] InitLigCoord added, to initialize the original coord of the ligand
      #+BEGIN_SRC 
      void InitLigCoord (Ligand *, const ComplexSize);
      #+END_SRC
    - [-] in perturbation
      - c++ code
      #+BEGIN_SRC 
      double boltzmann     = 1.0;
      double step_t        = 1.0;
      double step_r        = 5.0;
      #+END_SRC
      #+BEGIN_SRC 
      for ( int i = 0; i < 3; i++ )
      {
      mc_conf3[i] = mc_conf1[i];

      mc_conf1[i] += mc_t * unirand( -1, 1 );
      }

      for ( int i = 3; i < 6; i++ )
      {
      mc_conf3[i] = mc_conf1[i];

      mc_conf1[i] += ( ( mc_r * unirand( -1, 1 ) ) * PI ) / 180.0;
      }
      #+END_SRC
      #+BEGIN_SRC 
      if ( unirand( 0, 1 ) > exp( ( -1.0 * ( mc_energy - energy_old ) ) / ( mc_b * mc_temp ) ) )
      #+END_SRC
**** DONE cuda code
      - cuda code
      - [X] same scale as in the c++ code
	#+BEGIN_SRC 
	const float t = 1.0f;
	const float r = 5.0f;
	#+END_SRC
      - [X] same translation vector applied
	#+BEGIN_SRC c++
	// pocket center coord should be added here rathre than the ligand center
	coord_new->x[l] = rot[0][0] * x + rot[0][1] * y + rot[0][2] * z + r[0] + cx;
	coord_new->y[l] = rot[1][0] * x + rot[1][1] * y + rot[1][2] * z + r[1] + cy;
	coord_new->z[l] = rot[2][0] * x + rot[2][1] * y + rot[2][2] * z + r[2] + cz;
	#+END_SRC

      - rotation matrix applied
      - calculating the ligand center
      - [X] set extremely high temperature to force the acceptance of each perturbation
	- [X] check the translation part
	  - the new center is just the old center vecotor plus the translation vector
	  - if only tanslation applied
	- [X] check the rotation part
      - [X] check by implementing a regular pattern of perturbation
	#+BEGIN_SRC 
#if COMPILE
      // perturbation depends on the step number
      if (step%2 == 0){
	if (bidx < 6) {
	  r[bidx] = 1.0f;
	}
	if (bidx > 2 && bidx < 6) {    
	  r[bidx] = -1.0f;
	}
	if (bidx < 6) {
	  r[bidx] += mylig->movematrix_old[bidx];
	  mylig->movematrix_new[bidx] = r[bidx];
	}
      }
      else
	{
	if (bidx < 6) {
	  r[bidx] = -1.0f;
	}
	if (bidx > 2 && bidx < 6) {    
	  r[bidx] = 1.0f;
	}
	if (bidx < 6) {
	  r[bidx] += mylig->movematrix_old[bidx];
	  mylig->movematrix_new[bidx] = r[bidx];
	}
      }
#endif
	#+END_SRC
	- [X] the edst is not correct
	  - [X] correct the way to calculate the new center
	    #+BEGIN_SRC 
  for (int i = 0; i < 3; ++i) { 
    // coord_new->center[i] += r[i]; // incorrect codes
    coord_new->center[i] = coord_orig->center[i] + mylig->movematrix_new[i]; // correct 
  }
	    #+END_SRC
	  
*** DONE correct the pmf energy calculation
    - energy of pmf slightly different compared with c++ codes result until r190 in svn log
    - the result is different in the third digit after the desimal
**** DONE check the pmf calculation
     - correct c++ code
       #+BEGIN_SRC 
    _epmf += _complex_pmf[(*ip1).getPointType()][(*il1).getAtomType()][1]
 * 1.0 / ( 1.0 + exp( ( -0.5 * dst + 6.0 ) * ( dst - _complex_pmf[(*ip1).getPointType()][(*il1).getAtomType()][0] ) ) );
       #+END_SRC
     - cuda code
       #+BEGIN_SRC 
	  const float dst_minus_pmf0 = dst - enepara_dc->pmf0[lig_t][prt_t];

	  epmf[bidx] +=
	    enepara_dc->pmf1[lig_t][prt_t] /
	    (1.0f + expf ((-0.5f * dst + 6.0f) * dst_minus_pmf0));
       #+END_SRC
**** DONE correct the pmf calculation
     pmf calculated to be correct after using the movematrix to record the trail of the system



*** DONE figure out the coordinate ref system of the ligand, ligand center and protein center
**** DONE  how upgraded in the serial C++ code
***** both ligand and prt center initialized at (0, 0, 0) coordinate
#+BEGIN_SRC c++ 
  for ( int ai = 0; ai < 3; ai++ )
  {
    _pocket_center[ai] = 0.0;
    _ligand_center[ai] = 0.0;
  }
#+END_SRC
***** both updated simultaneously, equal to the center of the coords loaded from the .sdf file
#+BEGIN_SRC c++
for ( int i5 = 0; i5 < 3; i5++ )
 {
  _ligand_center[i5] /= (double) _lna;
  _pocket_center[i5] /= (double) _lna;
 }
#+END_SRC
***** ligand moved to the center-of-mass frame
#+BEGIN_SRC c++
for ( int i1 = 0; i1 < _lna; i1++ )
  for ( int i5 = 0; i5 < 3; i5++ )
   tmp8[i1][i5] -= _ligand_center[i5];
 
 vector<CoordsLigand>::iterator i4;
 
 for ( i4 = _ligand_xyz.begin(); i4 < _ligand_xyz.end(); i4++ )
  (*i4).setCoords( tmp8[(*i4).getAtomNumber()][0], tmp8[(*i4).getAtomNumber()][1],tmp8[(*i4).getAtomNumber()][2], _lens_total );
#+END_SRC
***** ligand center initialized at (0,0,0) in calculating energy
#+BEGIN_SRC c++
 for ( int il5 = 0; il5 < 3; il5++ )
  _ligand_center[il5] = 0.0;
#+END_SRC
***** rotation matrix directly applied to the ligand coord with respective to the lab
#+BEGIN_SRC c++
  for ( int il4 = 0; il4 < 3; il4++)
  {
   for ( int il2 = 0; il2 < 3; il2++)
   {
    t_xyz[il2] = 0.0;
    
    for ( int il3 = 0; il3 < 3; il3++)
     t_xyz[il2] += b_xyz[il3] * r_mat[il4][il3][il2];
   }
   
   for ( int il2 = 0; il2 < 3; il2++)
    b_xyz[il2] = t_xyz[il2];
  }
#+END_SRC
      
*** DONE pocket_center accompany the protein structure
    - [X] pocket_center the same for all ligand conformations loaded from the same .sdf file
    - [X] pocket_center is a proporty of each replica and be used in every energy calculation

**** TODO how invloved in the energy calculation and Monte Carlo
    
** DONE move the load weight function to load.h and load.C
** DONE calculation of acceptance ratio added

   
** DONE column
   _evdw, _eele, _epmf, _ehpc, _ehdb, _edst, _epsp, _ekde, _elhm
    
** DONE normalize energy calculation for linear force field
   - weight abtained from using /home/jaydy/work/dat/output/output/FF_opt/0.8.ff
   - applying the linear transformation normalized_df = a*df + b
     #+BEGIN_SRC c++
     inputfiles->norpara_file.path_a = "../dat/linear_a";
     inputfiles->norpara_file.path_b = "../dat/linear_b";
     #+END_SRC
    | a:    |            |
    |-------+------------|
    | _evdw |   0.746595 |
    | _eele |  18.289225 |
    | _epmf |   0.282088 |
    | _ehpc |   0.427256 |
    | _ehdb |   2.147791 |
    | _edst |   0.497450 |
    | _epsp |   0.572314 |
    | _ekde | 233.329020 |
    | _elhm |   0.726683 |
    |-------+------------|
    | b:    |            |
    |-------+------------|
    | _evdw |   1.036550 |
    | _eele |  -0.028357 |
    | _epmf |   0.256679 |
    | _ehpc |  -1.023866 |
    | _ehdb |   1.000000 |
    | _edst |  -1.000000 |
    | _epsp |   0.001993 |
    | _ekde |  -1.000000 |
    | _elhm |  -0.294676 |
   - [X] 18 more float number from normalization parameter in the device constant
     
   - [X] abort to optimize calculat combination due to its low cost


* testing
   
** DONE size
   1. scipts
      /work/jaydy/working/docking/size_count_sub.sh
      /work/jaydy/working/docking/size_count.sh
   2. results
      /work/jaydy/src/GPUdock/gpudocksm-bayes-1.0/dat/size.out
	| type |  max | min |
	|------+------+-----|
	| pnp  | 1828 | 293 |
	| pnr  |  571 |  88 |
	| pens |   11 |  11 |
	| lna  |   62 |   6 |
	| lnb  |   70 |   5 |
	| lens |   51 |   1 |

** TODO test mcc 

*** DONE nan in the pearson coefficient between mcc and probability difference
    if the acceptance ratio is too low, then the dimension of mcc and energy are both one, from which the pearsonR
    program will return nan



** TODO GPU kernel launched too ugly
   #+BEGIN_SRC C++
   #include "gpusingle.cu"
   #+END_SRC


** TODO simplist monte carlo implementation
      
*** TODO best perturbation scale
    should be able to reflect the detaching of even one atom

*** DONE calculate MCC coefficient
*** DONE unknown ligand atom 'Ca'
    
*** DONE testing single temperature Monte Carlo
    - [X] subscript in bounds in accept_d.cu
      solved
    - [X] in perturbing the ligand, MyRand_d() is always positive
      solved
    - initialize the ligand away from the native pose, run single temperature Monte Carlo
      1. track the dst energy
	 dst energy decreases through the process, see
	 gpudocksm-rem-1.2/src/edst_single_temp_MC_away_center.pdf
      2. track the vdw energy
	 vdw energy fluctuats, see
	 gpudocksm-rem-1.2/src/evdw_single_temp_MC_away_center.pdf
    - initialize the ligand at the native pose
      1. track the dst energy
	 dst energy fluctuats at a low level, indicating the ligand moveing aournd the native pose, see
	 gpudocksm-rem-1.2/src/edst_single_temp_MC_at_center.pdf
*** DONE temperature on the AR of MC
    - script
      AR_MC_single_temp.sh
    - result
      with BOLTZMANN_CONST = 1.0f
    | temperature |    AR_MC |
    |-------------+----------|
    |    0.000001 | 0.003440 |
    |    0.000002 | 0.003466 |
    |    0.000004 | 0.003417 |
    |    0.000008 | 0.003331 |
    |    0.000016 | 0.003475 |
    |    0.000032 | 0.003498 |
    |    0.000064 | 0.003573 |
    |    0.000096 | 0.003948 |
    |    0.000128 | 0.004107 |
    |    0.000144 | 0.004148 |
    |    0.000216 | 0.004679 |
    |    0.000256 | 0.005476 |
    |    0.000324 | 0.006476 |
    |    0.000486 | 0.010730 |
    |    0.000512 | 0.010275 |
    |    0.000729 | 0.020125 |
    |    0.001024 | 0.027060 |
    |    0.001093 | 0.033435 |
    |    0.001639 | 0.058051 |
    |    0.002048 | 0.073684 |
    |    0.002458 | 0.089566 |
    |    0.003687 | 0.147971 |
    |    0.004096 | 0.157058 |
    |    0.005530 | 0.212904 |
    |    0.008192 | 0.282580 |
    |    0.008295 | 0.288165 |
    |    0.012442 | 0.385477 |
    |    0.016384 | 0.440276 |
    |    0.018663 | 0.473842 |
    |    0.027994 | 0.556481 |
    |    0.032768 | 0.581020 |
    |    0.041991 | 0.625931 |
    |    0.062986 | 0.704965 |
    |    0.065536 | 0.706120 |
    |    0.094479 | 0.790121 |
    |    0.131072 | 0.866801 |
    |    0.141718 | 0.878129 |
    |    0.212577 | 0.942685 |
    |    0.262144 | 0.960365 |
    |    0.318865 | 0.971370 |
    |    0.478297 | 0.984198 |
    |    0.524288 | 0.985535 |
    |    0.717445 | 0.990041 |
    |    1.048576 | 0.993395 |
    |    1.076167 | 0.993428 |
    
*** to diagnose one replica
    #+BEGIN_SRC C++ 
     const int myreplica = 0; // the # of replica chosen to print
    #+END_SRC


** TODO Replica-exchange Monte Carlo mode
   use lig and prt with only one conformation

*** TODO Replica-exchange acceptance ratio large than 1 if total steps set to be less than steps_per_bump
*** TODO is the potential energy surface rugged?

**** TODO if not rugged, will the parallel tempering help reaching the global minimum more quickly?
     1. trun on the raplica exchange
     2. run
	/home/jaydy/work/dat/rem_output/output_20140112_122718/dock.sh

*** TODO What would be a good AR of exchange ?

**** TODO What determines the AR of exchange ?
     All experiments should be done based on
     1. two replicas
     2. same translation and rotation perturbation scale
     3. mode1, replica 0 exchange between replica 1

***** TODO temperature interval?
****** TODO temperature range
******* TODO lowest temperature
	must be small enough to constrain the dynamics of the particle to the immediate vicinity of the nearest local minimum of the potential energy surface(PES)
******* TODO highest temperature
	cover essential of the PES
       	
****** TODO energy distribution vs temperature
       1. temperature range
	  [0.000032, 0.14]
       2. script
	  /home/jaydy/work/dat/rem_output/output_20140112_122718/dock.sh
       3. result
	  /home/jaydy/work/dat/rem_output/output_20140112_122718/report
***** DONE geometric distribution of temperature on probability of exchg_AR
      1. turn on the exchange
      2. set total temperature number to be 2
      3. in case the temperature is multipled by X each time
	 [lowest_temp, highest_temp]
	 lowest_temp * X^(num_temp-1) = highest_temp
      4. script 
	 /home/jaydy/Workspace/script/Bashscripts/exchg_ar_vs_temp.sh
      5. result
	 1a07C1
      | rep1_temp | rep2_temp | exchg_AR |
      |-----------+-----------+----------|
      |  .0004000 |  .0004800 | 0.310700 |
      |  .0004800 |  .0005760 | 0.329890 |
      |  .0005760 |  .0006912 | 0.325570 |
      |  .0006912 |  .0008294 | 0.329599 |
      |  .0008294 |  .0009952 | 0.331955 |
      |  .0009952 |  .0011942 | 0.347842 |
      |  .0011942 |  .0014330 | 0.334733 |
      |  .0014330 |  .0017196 | 0.327739 |
      |  .0017196 |  .0020635 | 0.332533 |
      |  .0020635 |  .0024762 | 0.325794 |
      |  .0024762 |  .0029714 | 0.337777 |
      |  .0029714 |  .0035656 | 0.338272 |
      |  .0035656 |  .0042787 | 0.327690 |
      |  .0042787 |  .0051344 | 0.323564 |
      |  .0051344 |  .0061612 | 0.326718 |
      |  .0061612 |  .0073934 | 0.328437 |
      |  .0073934 |  .0088720 | 0.322613 |
      |  .0088720 |  .0106464 | 0.313994 |
      |  .0106464 |  .0127756 | 0.330657 |
      |  .0127756 |  .0153307 | 0.345179 |

***** DONE size of the system?
      currently energy is averaged across all ligand atoms, 
      however, since only short interactions are considered in calculating the energy,
      and one ligand atom generally intearact with 20~ protein residues,
      total energy of the system is size independent.

***** DONE ratio of elementry MC trials and exchange trials
      - scripts
	stp_per_exchg.sh
      - result
        | stp_per_exchg | exchg_AR |
        |---------------+----------|
        |            10 | 0.045433 |
        |            20 | 0.046167 |
        |            30 | 0.051458 |
        |            40 | 0.043978 |
        |            50 | 0.050000 |
        |            60 | 0.045433 |
        |            70 | 0.052937 |
        |            80 | 0.049156 |
        |            90 | 0.062262 |
        |           100 | 0.052278 |
        |           110 | 0.050520 |
        |           120 | 0.052633 |
        |           130 | 0.051772 |
        |           140 | 0.051129 |
        |           150 | 0.051167 |
        |           160 | 0.046756 |
        |           170 | 0.052841 |
        |           180 | 0.047497 |
        |           190 | 0.053810 |
        |           200 | 0.050778 |
      - conclusion
	exchg_AR is rather stable with the number of steps per exchange


**** DONE set the geometric progression temperatures
     This temperatures settings ensures that the acceptance probability could be made uniform across all of the different replicas
     if each replica spends the same amount of simulation time at each temperature.
     #+BEGIN_SRC C++
    float beta_high = 1.0f / floor_temp;
    float beta_low = 1.0f / ceiling_temp;
    const float beta_ratio = exp (log (beta_high / beta_low) / (float) (num_temp - 1));

    float a = beta_low;
    for (int i = 0; i < num_temp; i++) {
      temp[i].order = i;
      temp[i].minus_beta = 0.0f - a;

      a *= beta_ratio;
    }
     #+END_SRC

**** DONE testing the parallel tempering
     - [X] load data from multiple dump files
     - [X] test dst energy
	
       


*** TODO fix the bug if steps_per_exchange set to zero

*** DONE plot the histgram of the energy
*** DONE to use mode0 and mode1 alternatively
    #+BEGIN_SRC C++
      const int mode_t = (s2/mc_para->steps_per_exchange) % 2; // temperature exchange mode
    #+END_SRC
       
*** DONE which mode supposts complete information exchange
    - mode0 and mode1 combined together provides a mechanism that can do a complete information 


** TODO search the lowest energy in the track
   to find the lowest energy and the corresponding configuration in each replica

*** TODO in production version, every step has to be recorded, which generate redunancy
    1. because memory allocated for recording would be left with some unused space 
       if only the accepted configuration information is recorded
    2. about 9.0% performace would be lost due to recording redundancy information
**** TODO record 
    - [ ] total energy
    - [ ] movematrix
    - [ ] ligand conformation and protein conformation
**** TODO estimate hard disk requirement
     - [ ] set total steps and total temperature from cmd

       
** TODO requirement for hard drive
   

** TODO why care about the # mcs ??
   #+BEGIN_SRC 
  complexsize.n_pos = inputfiles->lhm_file.n_pos;	// number of MCS positions
   #+END_SRC

** DONE Customized-bayesian force field
   correct the wald pdf 

    
** DONE read the track record
   1. script
      /home/jaydy/Workspace/script/Pyscripts/readH5.py
      /home/jaydy/Workspace/script/Pyscripts/docking_analy.py

** DONE move the ligand away from native pose
   #+BEGIN_SRC C++
    #if IS_AWAY == 1
	    MoveAway_d (bidx, mylig);
    #endif 
    #if IS_AWAY
	  // force to accept, set mybeta to be zero
	    Accept_d (bidx, mylig, 0.000000f, myreplica);
    #endif
   #+END_SRC


** DONE argument parsing
   #+BEGIN_SRC C++
     void
     ParseArguments (int argc, char **argv, McPara * mcpara, InputFiles * inputfiles);
   #+END_SRC

** DONE introduce the toggle of random walk
   #+BEGIN_SRC 
   mcpara->if_random = 1; // random walk by default
   #+END_SRC
   
** DONE load the weight from file
   - old
   #+BEGIN_SRC 
    mylig->etotal[mylig->track] =
      enepara_dc->w[0] * evdw[0] +
      enepara_dc->w[1] * eele[0] +
      enepara_dc->w[2] * epmf[0] +
      enepara_dc->w[3] * epsp[0] +
      enepara_dc->w[4] * ehdb[0] +
      enepara_dc->w[5] * ehpc[0] +
      enepara_dc->w[6] * ekde[0] +
      enepara_dc->w[7] * elhm[0] +
      enepara_dc->w[8] * edst;
   #+END_SRC
   - new
   #+BEGIN_SRC 
    mylig->etotal[mylig->track] =
      enepara_dc->w[0] * evdw[0] +
      enepara_dc->w[1] * eele[0] +
      enepara_dc->w[2] * epmf[0] +
      enepara_dc->w[3] * ehpc[0] +
      enepara_dc->w[4] * ehdb[0] +
      enepara_dc->w[5] * edst +
      enepara_dc->w[6] * epsp[0] +
      enepara_dc->w[7] * ekde[0] +
      enepara_dc->w[8] * elhm[0];
   #+END_SRC

   #+BEGIN_SRC 
	std::string ifn = path;

	list < string > data;
	list < string >::iterator data_i;

	string line1;				// tmp string for each line
	ifstream data_file(ifn.c_str());	// open the data_file as the buffer

	if (!data_file.is_open()) {
		cout << "cannot open " << ifn << endl;
		exit(EXIT_FAILURE);
	}

	while (getline(data_file, line1))
		data.push_back(line1);	// push each line to the list

	data_file.close();			// close

	int total_weight_item = data.size();
	int weight_iter = 0;

	for (weight_iter = 0, data_i = data.begin(); weight_iter < total_weight_item && data_i != data.end(); weight_iter++, data_i++) {	// interate the list
		string s = (*data_i).substr(0, 30);
		istringstream os(s);
		double tmp = 0.0;
		os >> tmp;				// this tmp is what you need. do whatever you want with it
		enepara->w[weight_iter] = tmp;
	}
   
   #+END_SRC
   
** DONE What does output_20131205_105456/a_XXXX.h5's xxxx stand for ???
   to leave 4 digits
